Global Functions in the Address Context
Any variable of the data type address can use the global functions defined in the address context. The built-in functions defined in the address context are:

Balance: Returns the balance of the address in Wei. For an address mycontract, the function call is defined as 'mycontract.balance;'. 
This will return the balance of mycontract in Wei. The return type is uint256.

transfer(): Sends the given amount of Wei from the current account to the address mentioned.
If you want to send x amount of Wei from the current account to an address mycontract, then the 
function call will be defined as follows: 'mycontract.transfer(uint256 x);'. The problem with the 
transfer function is if an error occurs during the transaction, the transaction fails.

send(): Sends the given amount of Wei from the current account to the address mentioned. If you want
to send x amount of Wei from the current account to an address mycontract, then the function call will be
defined as : 'mycontract.send(uint256 x);'. The return type of the send function is bool, and whenever a transaction
encounters an error, the send function returns false. Based on this, appropriate action can be taken. This is what
differentiates the send function from the transfer function.

call(), staticcall() and delegatecall(): These low-level functions don't go through the checks by the 
Solidity compiler. That's why it is not advised not to use them unless absolutely necessary. The call
and staticcall functions work in a similar manner as the transfer or send function. However, delegatecall
works differently. If A invokes B who makes a delegatecall to C, then the msg.sender in the delegatecall will
be A and not B. This way we can preserve the original sender of the message. All these low-level functions take
bytes as input and the return type is a combination of bool and bytes data types.
